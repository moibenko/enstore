#!/usr/bin/env bash
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# Script to maintain minimal number of empty slots per rail in StorageTek
# SL8500 libraries and attempt to prevent overuse of the elevator.
#
# The parameter is either
#
#	"equal"   => use PTP on all rails equally
#	"minmax"  => move from lo to lo+4 or hi, and iterate
#	"toprail" => use top rails as holding areas,
#		     and use PTP only on top rail

acs_node="fntt-gcc"
let min_slots=100
acs=0

# extract volumes from display list
awk_xv() { awk '$1~/[A-Z][A-Z][A-Z0-9][0-9][0-9][0-9]/ && $2~/[0-9-]+/ && $3~/[0-9:]+/ {print $1}'; }

stk_cmd() { /usr/bin/rsh $acs_node -l acsss "echo '$1' '\r' logoff | bin/cmd_proc -lq 2>/dev/null"; }

# list the least recently accessed data volumes
stk_dv() { stk_cmd "display volume * -home $2,*,*,* -data -f access_date -s access_date -n $1"; }

# move a volume
stk_mv() { stk_cmd "move $1 ${2:-0,0}"; }

# choose next volume and move it
moveVol() { local lsm1=$1; local lsm2=$2
	    set ${vols[lsm1]}
	    echo "Moving $1 from LSM $lsm1 to LSM $lsm2."
	    stk_mv $1 $acs,$lsm2 1>/dev/null
	    shift
	    vols[lsm1]="$*"
	    sleep 15
	  }

# return minimum of a set of arguments
min() { let ret=$1
	shift
	for val
	do
	  (( val < ret )) && let ret=val
	done
	echo $ret
      }

# how many free slots are on each rail?
qlsm=`stk_cmd "query lsm all"`
let free_hi=0 free_lo=$min_slots free_sum=0
for lsm in 0 1 2 3; do
  eval free_$lsm=`echo "$qlsm" | sed 's/, /,/' | awk -v rail="$acs,$lsm" '$1 == rail && $2 == "online" {print $3}'`
  (( free_$lsm > free_hi )) && { let free_hi=free_$lsm; hi_lsm=$lsm; }
  (( free_$lsm < free_lo )) && { let free_lo=free_$lsm; lo_lsm=$lsm; }
  let free_sum+=free_$lsm
done

case ${1:-minmax} in

  equal)
    # find volumes to move, treating all rails equally
    let max_moves=0
    for lsm in 0 1 2 3; do
      let move_vols[lsm]=min_slots-free_$lsm
      if (( move_vols[lsm] > 0 ))
      then
	(( move_vols[lsm] > max_moves )) && let max_moves=move_vols[lsm]
	echo "${move_vols[lsm]} volumes will be moved from LSM $acs,$lsm to LSM $acs,$(( lsm + 4 ))."
	vols[lsm]=`stk_dv ${move_vols[lsm]} $acs,$lsm | awk_xv`
      fi
    done

    # move volumes from LSMs 0-3 to LSMs 4-7
    while (( max_moves-- > 0 )); do
      for lsm in 0 1 2 3; do
	if [ -n "${vols[lsm]:-}" ]
	then
	  moveVol $lsm $(( lsm + 4 ))
	fi
      done
    done
    ;;

  minmax)
    # find the rail with the fewest free slots
    while (( free_lo < min_slots )); do
      if (( free_hi < min_slots ))
      then
        # move volumes from side to side
	$0 equal
      else
        # move volumes from lo rail to hi rail
        let num_moves=`min $(( min_slots-free_lo )) $(( free_hi-min_slots ))`
        echo "$num_moves volumes will be moved from LSM $acs,$lo_lsm to LSM $acs,$hi_lsm."
	vols[lo_lsm]=`stk_dv $num_moves $acs,$lo_lsm | awk_xv`
	while (( num_moves-- > 0 )); do
	  moveVol $lo_lsm $hi_lsm
	done
      fi
      qlsm=`stk_cmd "query lsm all"`
      let free_hi=0 free_lo=$min_slots free_sum=0
      for lsm in 0 1 2 3; do
        eval free_$lsm=`echo "$qlsm" | sed 's/, /,/' | awk -v rail="$acs,$lsm" '$1 == rail && $2 == "online" {print $3}'`
        (( free_$lsm > free_hi )) && { let free_hi=free_$lsm; hi_lsm=$lsm; }
        (( free_$lsm < free_lo )) && { let free_lo=free_$lsm; lo_lsm=$lsm; }
        let free_sum+=free_$lsm
      done
    done
    ;;

  toprail)
    # find volumes to move using the top rails as holding areas
    let max_moves=0
    let move_vols[0]=min_slots-free_0
    for lsm in 1 2 3; do
      let move_vols[lsm]=min_slots-free_$lsm
      if (( move_vols[lsm] > 0 ))
      then
#	(( move_vols[lsm] > free_0/3 ))  && let move_vols[lsm]=free_0/3
	(( move_vols[lsm] > max_moves )) && let max_moves=move_vols[lsm]
	let move_vols[0]+=move_vols[lsm]
	echo "${move_vols[lsm]} volumes will be moved from LSM $acs,$lsm to LSM $acs,0."
	vols[lsm]=`stk_dv ${move_vols[lsm]} $acs,$lsm | awk_xv`
      fi
    done
    if (( move_vols[0] > 0 ))
    then
      (( move_vols[0] > max_moves )) && let max_moves=move_vols[0]
      echo "${move_vols[0]} volumes will be moved from LSM $acs,0 to LSM $acs,4."
      vols[0]=`stk_dv ${move_vols[0]} $acs,0 | awk_xv`
    fi

    # move volumes from LSM 0 to LSM 4, from LSMs 1-3 to LSM 0
    while (( max_moves-- > 0 )); do
      for lsm in 0 1 0 2 0 3; do
	if [ -n "${vols[lsm]:-}" ]
	then
	  moveVol $lsm $(( lsm > 0 ? 0 : 4 ))
	fi
      done
    done
    ;;

esac
